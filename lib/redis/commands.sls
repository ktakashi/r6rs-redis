;; -*- mode: scheme; coding: utf-8 -*-
;; This file is automatically generated by commands.scm. DON'T EDIT!
#!r6rs
(library (redis commands)
    (export redis-append
            redis-auth
            redis-bgrewriteaof
            redis-bgsave
            redis-bitcount
            redis-bitfield
            redis-bitop
            redis-bitpos
            redis-blpop
            redis-brpop
            redis-brpoplpush
            redis-bzpopmin
            redis-bzpopmax
            redis-client-id
            redis-client-kill
            redis-client-list
            redis-client-getname
            redis-client-pause
            redis-client-reply
            redis-client-setname
            redis-client-unblock
            redis-cluster-addslots
            redis-cluster-count-failure-reports
            redis-cluster-countkeysinslot
            redis-cluster-delslots
            redis-cluster-failover
            redis-cluster-forget
            redis-cluster-getkeysinslot
            redis-cluster-info
            redis-cluster-keyslot
            redis-cluster-meet
            redis-cluster-nodes
            redis-cluster-replicate
            redis-cluster-reset
            redis-cluster-saveconfig
            redis-cluster-set-config-epoch
            redis-cluster-setslot
            redis-cluster-slaves
            redis-cluster-replicas
            redis-cluster-slots
            redis-command
            redis-command-count
            redis-command-getkeys
            redis-command-info
            redis-config-get
            redis-config-rewrite
            redis-config-set
            redis-config-resetstat
            redis-dbsize
            redis-debug-object
            redis-debug-segfault
            redis-decr
            redis-decrby
            redis-del
            redis-discard
            redis-dump
            redis-echo
            redis-eval
            redis-evalsha
            redis-exec
            redis-exists
            redis-expire
            redis-expireat
            redis-flushall
            redis-flushdb
            redis-geoadd
            redis-geohash
            redis-geopos
            redis-geodist
            redis-georadius
            redis-georadiusbymember
            redis-get
            redis-getbit
            redis-getrange
            redis-getset
            redis-hdel
            redis-hexists
            redis-hget
            redis-hgetall
            redis-hincrby
            redis-hincrbyfloat
            redis-hkeys
            redis-hlen
            redis-hmget
            redis-hmset
            redis-hset
            redis-hsetnx
            redis-hstrlen
            redis-hvals
            redis-incr
            redis-incrby
            redis-incrbyfloat
            redis-info
            redis-keys
            redis-lastsave
            redis-lindex
            redis-linsert
            redis-llen
            redis-lpop
            redis-lpush
            redis-lpushx
            redis-lrange
            redis-lrem
            redis-lset
            redis-ltrim
            redis-memory-doctor
            redis-memory-help
            redis-memory-malloc-stats
            redis-memory-purge
            redis-memory-stats
            redis-memory-usage
            redis-mget
            redis-migrate
            redis-monitor
            redis-move
            redis-mset
            redis-msetnx
            redis-multi
            redis-object
            redis-persist
            redis-pexpire
            redis-pexpireat
            redis-pfadd
            redis-pfcount
            redis-pfmerge
            redis-ping
            redis-psetex
            redis-psubscribe
            redis-pubsub
            redis-pttl
            redis-publish
            redis-punsubscribe
            redis-quit
            redis-randomkey
            redis-readonly
            redis-readwrite
            redis-rename
            redis-renamenx
            redis-restore
            redis-role
            redis-rpop
            redis-rpoplpush
            redis-rpush
            redis-rpushx
            redis-sadd
            redis-save
            redis-scard
            redis-script-debug
            redis-script-exists
            redis-script-flush
            redis-script-kill
            redis-script-load
            redis-sdiff
            redis-sdiffstore
            redis-select
            redis-set
            redis-setbit
            redis-setex
            redis-setnx
            redis-setrange
            redis-shutdown
            redis-sinter
            redis-sinterstore
            redis-sismember
            redis-slaveof
            redis-replicaof
            redis-slowlog
            redis-smembers
            redis-smove
            redis-sort
            redis-spop
            redis-srandmember
            redis-srem
            redis-strlen
            redis-subscribe
            redis-sunion
            redis-sunionstore
            redis-swapdb
            redis-sync
            redis-time
            redis-touch
            redis-ttl
            redis-type
            redis-unsubscribe
            redis-unlink
            redis-unwatch
            redis-wait
            redis-watch
            redis-zadd
            redis-zcard
            redis-zcount
            redis-zincrby
            redis-zinterstore
            redis-zlexcount
            redis-zpopmax
            redis-zpopmin
            redis-zrange
            redis-zrangebylex
            redis-zrevrangebylex
            redis-zrangebyscore
            redis-zrank
            redis-zrem
            redis-zremrangebylex
            redis-zremrangebyrank
            redis-zremrangebyscore
            redis-zrevrange
            redis-zrevrangebyscore
            redis-zrevrank
            redis-zscore
            redis-zunionstore
            redis-scan
            redis-sscan
            redis-hscan
            redis-zscan
            redis-xinfo
            redis-xadd
            redis-xtrim
            redis-xdel
            redis-xrange
            redis-xrevrange
            redis-xlen
            redis-xread
            redis-xgroup
            redis-xreadgroup
            redis-xack
            redis-xclaim
            redis-xpending
            )
    (import (rnrs)
            (redis api))

;; APPEND key value
(define (redis-append redis-connection key value)
  (redis-send-command redis-connection "APPEND" key value)) 

;; AUTH password
(define (redis-auth redis-connection password)
  (redis-send-command redis-connection "AUTH" password)) 

;; BGREWRITEAOF
(define (redis-bgrewriteaof redis-connection)
  (redis-send-command redis-connection "BGREWRITEAOF")) 

;; BGSAVE
(define (redis-bgsave redis-connection)
  (redis-send-command redis-connection "BGSAVE")) 

;; BITCOUNT key [start end]
(define (redis-bitcount redis-connection key . opts)
  (apply redis-send-command redis-connection "BITCOUNT" key opts)) 

;; BITFIELD key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]
(define (redis-bitfield redis-connection key . opts)
  (apply redis-send-command redis-connection "BITFIELD" key opts)) 

;; BITOP operation destkey key [key ...]
(define (redis-bitop redis-connection operation destkey key . opts)
  (apply redis-send-command redis-connection "BITOP" operation destkey key opts)) 

;; BITPOS key bit [start] [end]
(define (redis-bitpos redis-connection key bit . opts)
  (apply redis-send-command redis-connection "BITPOS" key bit opts)) 

;; BLPOP key [key ...] timeout
(define (redis-blpop redis-connection key . opts)
  (apply redis-send-command redis-connection "BLPOP" key opts)) 

;; BRPOP key [key ...] timeout
(define (redis-brpop redis-connection key . opts)
  (apply redis-send-command redis-connection "BRPOP" key opts)) 

;; BRPOPLPUSH source destination timeout
(define (redis-brpoplpush redis-connection source destination timeout)
  (redis-send-command redis-connection "BRPOPLPUSH" source destination timeout)) 

;; BZPOPMIN key [key ...] timeout
(define (redis-bzpopmin redis-connection key . opts)
  (apply redis-send-command redis-connection "BZPOPMIN" key opts)) 

;; BZPOPMAX key [key ...] timeout
(define (redis-bzpopmax redis-connection key . opts)
  (apply redis-send-command redis-connection "BZPOPMAX" key opts)) 

;; CLIENT ID
(define (redis-client-id redis-connection)
  (redis-send-command redis-connection "CLIENT ID")) 

;; CLIENT KILL [ip:port] [ID client-id] [TYPE normal|master|slave|pubsub] [ADDR ip:port] [SKIPME yes/no]
(define (redis-client-kill redis-connection . opts)
  (apply redis-send-command redis-connection "CLIENT KILL" opts)) 

;; CLIENT LIST [TYPE normal|master|replica|pubsub]
(define (redis-client-list redis-connection . opts)
  (apply redis-send-command redis-connection "CLIENT LIST" opts)) 

;; CLIENT GETNAME
(define (redis-client-getname redis-connection)
  (redis-send-command redis-connection "CLIENT GETNAME")) 

;; CLIENT PAUSE timeout
(define (redis-client-pause redis-connection timeout)
  (redis-send-command redis-connection "CLIENT PAUSE" timeout)) 

;; CLIENT REPLY ON|OFF|SKIP
(define (redis-client-reply redis-connection arg1)
  (redis-send-command redis-connection "CLIENT REPLY" arg1)) 

;; CLIENT SETNAME connection-name
(define (redis-client-setname redis-connection connection-name)
  (redis-send-command redis-connection "CLIENT SETNAME" connection-name)) 

;; CLIENT UNBLOCK client-id [TIMEOUT|ERROR]
(define (redis-client-unblock redis-connection client-id . opts)
  (apply redis-send-command redis-connection "CLIENT UNBLOCK" client-id opts)) 

;; CLUSTER ADDSLOTS slot [slot ...]
(define (redis-cluster-addslots redis-connection slot . opts)
  (apply redis-send-command redis-connection "CLUSTER ADDSLOTS" slot opts)) 

;; CLUSTER COUNT-FAILURE-REPORTS node-id
(define (redis-cluster-count-failure-reports redis-connection node-id)
  (redis-send-command redis-connection "CLUSTER COUNT-FAILURE-REPORTS" node-id)) 

;; CLUSTER COUNTKEYSINSLOT slot
(define (redis-cluster-countkeysinslot redis-connection slot)
  (redis-send-command redis-connection "CLUSTER COUNTKEYSINSLOT" slot)) 

;; CLUSTER DELSLOTS slot [slot ...]
(define (redis-cluster-delslots redis-connection slot . opts)
  (apply redis-send-command redis-connection "CLUSTER DELSLOTS" slot opts)) 

;; CLUSTER FAILOVER [FORCE|TAKEOVER]
(define (redis-cluster-failover redis-connection . opts)
  (apply redis-send-command redis-connection "CLUSTER FAILOVER" opts)) 

;; CLUSTER FORGET node-id
(define (redis-cluster-forget redis-connection node-id)
  (redis-send-command redis-connection "CLUSTER FORGET" node-id)) 

;; CLUSTER GETKEYSINSLOT slot count
(define (redis-cluster-getkeysinslot redis-connection slot count)
  (redis-send-command redis-connection "CLUSTER GETKEYSINSLOT" slot count)) 

;; CLUSTER INFO
(define (redis-cluster-info redis-connection)
  (redis-send-command redis-connection "CLUSTER INFO")) 

;; CLUSTER KEYSLOT key
(define (redis-cluster-keyslot redis-connection key)
  (redis-send-command redis-connection "CLUSTER KEYSLOT" key)) 

;; CLUSTER MEET ip port
(define (redis-cluster-meet redis-connection ip port)
  (redis-send-command redis-connection "CLUSTER MEET" ip port)) 

;; CLUSTER NODES
(define (redis-cluster-nodes redis-connection)
  (redis-send-command redis-connection "CLUSTER NODES")) 

;; CLUSTER REPLICATE node-id
(define (redis-cluster-replicate redis-connection node-id)
  (redis-send-command redis-connection "CLUSTER REPLICATE" node-id)) 

;; CLUSTER RESET [HARD|SOFT]
(define (redis-cluster-reset redis-connection . opts)
  (apply redis-send-command redis-connection "CLUSTER RESET" opts)) 

;; CLUSTER SAVECONFIG
(define (redis-cluster-saveconfig redis-connection)
  (redis-send-command redis-connection "CLUSTER SAVECONFIG")) 

;; CLUSTER SET-CONFIG-EPOCH config-epoch
(define (redis-cluster-set-config-epoch redis-connection config-epoch)
  (redis-send-command redis-connection "CLUSTER SET-CONFIG-EPOCH" config-epoch)) 

;; CLUSTER SETSLOT slot IMPORTING|MIGRATING|STABLE|NODE [node-id]
(define (redis-cluster-setslot redis-connection slot arg2 . opts)
  (apply redis-send-command redis-connection "CLUSTER SETSLOT" slot arg2 opts)) 

;; CLUSTER SLAVES node-id
(define (redis-cluster-slaves redis-connection node-id)
  (redis-send-command redis-connection "CLUSTER SLAVES" node-id)) 

;; CLUSTER REPLICAS node-id
(define (redis-cluster-replicas redis-connection node-id)
  (redis-send-command redis-connection "CLUSTER REPLICAS" node-id)) 

;; CLUSTER SLOTS
(define (redis-cluster-slots redis-connection)
  (redis-send-command redis-connection "CLUSTER SLOTS")) 

;; COMMAND
(define (redis-command redis-connection)
  (redis-send-command redis-connection "COMMAND")) 

;; COMMAND COUNT
(define (redis-command-count redis-connection)
  (redis-send-command redis-connection "COMMAND COUNT")) 

;; COMMAND GETKEYS
(define (redis-command-getkeys redis-connection)
  (redis-send-command redis-connection "COMMAND GETKEYS")) 

;; COMMAND INFO command-name [command-name ...]
(define (redis-command-info redis-connection command-name . opts)
  (apply redis-send-command redis-connection "COMMAND INFO" command-name opts)) 

;; CONFIG GET parameter
(define (redis-config-get redis-connection parameter)
  (redis-send-command redis-connection "CONFIG GET" parameter)) 

;; CONFIG REWRITE
(define (redis-config-rewrite redis-connection)
  (redis-send-command redis-connection "CONFIG REWRITE")) 

;; CONFIG SET parameter value
(define (redis-config-set redis-connection parameter value)
  (redis-send-command redis-connection "CONFIG SET" parameter value)) 

;; CONFIG RESETSTAT
(define (redis-config-resetstat redis-connection)
  (redis-send-command redis-connection "CONFIG RESETSTAT")) 

;; DBSIZE
(define (redis-dbsize redis-connection)
  (redis-send-command redis-connection "DBSIZE")) 

;; DEBUG OBJECT key
(define (redis-debug-object redis-connection key)
  (redis-send-command redis-connection "DEBUG OBJECT" key)) 

;; DEBUG SEGFAULT
(define (redis-debug-segfault redis-connection)
  (redis-send-command redis-connection "DEBUG SEGFAULT")) 

;; DECR key
(define (redis-decr redis-connection key)
  (redis-send-command redis-connection "DECR" key)) 

;; DECRBY key decrement
(define (redis-decrby redis-connection key decrement)
  (redis-send-command redis-connection "DECRBY" key decrement)) 

;; DEL key [key ...]
(define (redis-del redis-connection key . opts)
  (apply redis-send-command redis-connection "DEL" key opts)) 

;; DISCARD
(define (redis-discard redis-connection)
  (redis-send-command redis-connection "DISCARD")) 

;; DUMP key
(define (redis-dump redis-connection key)
  (redis-send-command redis-connection "DUMP" key)) 

;; ECHO message
(define (redis-echo redis-connection message)
  (redis-send-command redis-connection "ECHO" message)) 

;; EVAL script numkeys key [key ...] arg [arg ...]
(define (redis-eval redis-connection script numkeys key . opts)
  (apply redis-send-command redis-connection "EVAL" script numkeys key opts)) 

;; EVALSHA sha1 numkeys key [key ...] arg [arg ...]
(define (redis-evalsha redis-connection sha1 numkeys key . opts)
  (apply redis-send-command redis-connection "EVALSHA" sha1 numkeys key opts)) 

;; EXEC
(define (redis-exec redis-connection)
  (redis-send-command redis-connection "EXEC")) 

;; EXISTS key [key ...]
(define (redis-exists redis-connection key . opts)
  (apply redis-send-command redis-connection "EXISTS" key opts)) 

;; EXPIRE key seconds
(define (redis-expire redis-connection key seconds)
  (redis-send-command redis-connection "EXPIRE" key seconds)) 

;; EXPIREAT key timestamp
(define (redis-expireat redis-connection key timestamp)
  (redis-send-command redis-connection "EXPIREAT" key timestamp)) 

;; FLUSHALL [ASYNC]
(define (redis-flushall redis-connection . opts)
  (apply redis-send-command redis-connection "FLUSHALL" opts)) 

;; FLUSHDB [ASYNC]
(define (redis-flushdb redis-connection . opts)
  (apply redis-send-command redis-connection "FLUSHDB" opts)) 

;; GEOADD key longitude latitude member [longitude latitude member ...]
(define (redis-geoadd redis-connection key longitude latitude member . opts)
  (apply redis-send-command redis-connection "GEOADD" key longitude latitude member opts)) 

;; GEOHASH key member [member ...]
(define (redis-geohash redis-connection key member . opts)
  (apply redis-send-command redis-connection "GEOHASH" key member opts)) 

;; GEOPOS key member [member ...]
(define (redis-geopos redis-connection key member . opts)
  (apply redis-send-command redis-connection "GEOPOS" key member opts)) 

;; GEODIST key member1 member2 [unit]
(define (redis-geodist redis-connection key member1 member2 . opts)
  (apply redis-send-command redis-connection "GEODIST" key member1 member2 opts)) 

;; GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]
(define (redis-georadius redis-connection key longitude latitude radius arg3 . opts)
  (apply redis-send-command redis-connection "GEORADIUS" key longitude latitude radius arg3 opts)) 

;; GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]
(define (redis-georadiusbymember redis-connection key member radius arg4 . opts)
  (apply redis-send-command redis-connection "GEORADIUSBYMEMBER" key member radius arg4 opts)) 

;; GET key
(define (redis-get redis-connection key)
  (redis-send-command redis-connection "GET" key)) 

;; GETBIT key offset
(define (redis-getbit redis-connection key offset)
  (redis-send-command redis-connection "GETBIT" key offset)) 

;; GETRANGE key start end
(define (redis-getrange redis-connection key start end)
  (redis-send-command redis-connection "GETRANGE" key start end)) 

;; GETSET key value
(define (redis-getset redis-connection key value)
  (redis-send-command redis-connection "GETSET" key value)) 

;; HDEL key field [field ...]
(define (redis-hdel redis-connection key field . opts)
  (apply redis-send-command redis-connection "HDEL" key field opts)) 

;; HEXISTS key field
(define (redis-hexists redis-connection key field)
  (redis-send-command redis-connection "HEXISTS" key field)) 

;; HGET key field
(define (redis-hget redis-connection key field)
  (redis-send-command redis-connection "HGET" key field)) 

;; HGETALL key
(define (redis-hgetall redis-connection key)
  (redis-send-command redis-connection "HGETALL" key)) 

;; HINCRBY key field increment
(define (redis-hincrby redis-connection key field increment)
  (redis-send-command redis-connection "HINCRBY" key field increment)) 

;; HINCRBYFLOAT key field increment
(define (redis-hincrbyfloat redis-connection key field increment)
  (redis-send-command redis-connection "HINCRBYFLOAT" key field increment)) 

;; HKEYS key
(define (redis-hkeys redis-connection key)
  (redis-send-command redis-connection "HKEYS" key)) 

;; HLEN key
(define (redis-hlen redis-connection key)
  (redis-send-command redis-connection "HLEN" key)) 

;; HMGET key field [field ...]
(define (redis-hmget redis-connection key field . opts)
  (apply redis-send-command redis-connection "HMGET" key field opts)) 

;; HMSET key field value [field value ...]
(define (redis-hmset redis-connection key field value . opts)
  (apply redis-send-command redis-connection "HMSET" key field value opts)) 

;; HSET key field value
(define (redis-hset redis-connection key field value)
  (redis-send-command redis-connection "HSET" key field value)) 

;; HSETNX key field value
(define (redis-hsetnx redis-connection key field value)
  (redis-send-command redis-connection "HSETNX" key field value)) 

;; HSTRLEN key field
(define (redis-hstrlen redis-connection key field)
  (redis-send-command redis-connection "HSTRLEN" key field)) 

;; HVALS key
(define (redis-hvals redis-connection key)
  (redis-send-command redis-connection "HVALS" key)) 

;; INCR key
(define (redis-incr redis-connection key)
  (redis-send-command redis-connection "INCR" key)) 

;; INCRBY key increment
(define (redis-incrby redis-connection key increment)
  (redis-send-command redis-connection "INCRBY" key increment)) 

;; INCRBYFLOAT key increment
(define (redis-incrbyfloat redis-connection key increment)
  (redis-send-command redis-connection "INCRBYFLOAT" key increment)) 

;; INFO [section]
(define (redis-info redis-connection . opts)
  (apply redis-send-command redis-connection "INFO" opts)) 

;; KEYS pattern
(define (redis-keys redis-connection pattern)
  (redis-send-command redis-connection "KEYS" pattern)) 

;; LASTSAVE
(define (redis-lastsave redis-connection)
  (redis-send-command redis-connection "LASTSAVE")) 

;; LINDEX key index
(define (redis-lindex redis-connection key index)
  (redis-send-command redis-connection "LINDEX" key index)) 

;; LINSERT key BEFORE|AFTER pivot value
(define (redis-linsert redis-connection key arg5 pivot value)
  (redis-send-command redis-connection "LINSERT" key arg5 pivot value)) 

;; LLEN key
(define (redis-llen redis-connection key)
  (redis-send-command redis-connection "LLEN" key)) 

;; LPOP key
(define (redis-lpop redis-connection key)
  (redis-send-command redis-connection "LPOP" key)) 

;; LPUSH key value [value ...]
(define (redis-lpush redis-connection key value . opts)
  (apply redis-send-command redis-connection "LPUSH" key value opts)) 

;; LPUSHX key value
(define (redis-lpushx redis-connection key value)
  (redis-send-command redis-connection "LPUSHX" key value)) 

;; LRANGE key start stop
(define (redis-lrange redis-connection key start stop)
  (redis-send-command redis-connection "LRANGE" key start stop)) 

;; LREM key count value
(define (redis-lrem redis-connection key count value)
  (redis-send-command redis-connection "LREM" key count value)) 

;; LSET key index value
(define (redis-lset redis-connection key index value)
  (redis-send-command redis-connection "LSET" key index value)) 

;; LTRIM key start stop
(define (redis-ltrim redis-connection key start stop)
  (redis-send-command redis-connection "LTRIM" key start stop)) 

;; MEMORY DOCTOR
(define (redis-memory-doctor redis-connection)
  (redis-send-command redis-connection "MEMORY DOCTOR")) 

;; MEMORY HELP
(define (redis-memory-help redis-connection)
  (redis-send-command redis-connection "MEMORY HELP")) 

;; MEMORY MALLOC-STATS
(define (redis-memory-malloc-stats redis-connection)
  (redis-send-command redis-connection "MEMORY MALLOC-STATS")) 

;; MEMORY PURGE
(define (redis-memory-purge redis-connection)
  (redis-send-command redis-connection "MEMORY PURGE")) 

;; MEMORY STATS
(define (redis-memory-stats redis-connection)
  (redis-send-command redis-connection "MEMORY STATS")) 

;; MEMORY USAGE key [SAMPLES count]
(define (redis-memory-usage redis-connection key . opts)
  (apply redis-send-command redis-connection "MEMORY USAGE" key opts)) 

;; MGET key [key ...]
(define (redis-mget redis-connection key . opts)
  (apply redis-send-command redis-connection "MGET" key opts)) 

;; MIGRATE host port key|"" destination-db timeout [COPY] [REPLACE] [KEYS key [key ...] ]
(define (redis-migrate redis-connection host port arg6 destination-db timeout . opts)
  (apply redis-send-command redis-connection "MIGRATE" host port arg6 destination-db timeout opts)) 

;; MONITOR
(define (redis-monitor redis-connection)
  (redis-send-command redis-connection "MONITOR")) 

;; MOVE key db
(define (redis-move redis-connection key db)
  (redis-send-command redis-connection "MOVE" key db)) 

;; MSET key value [key value ...]
(define (redis-mset redis-connection key value . opts)
  (apply redis-send-command redis-connection "MSET" key value opts)) 

;; MSETNX key value [key value ...]
(define (redis-msetnx redis-connection key value . opts)
  (apply redis-send-command redis-connection "MSETNX" key value opts)) 

;; MULTI
(define (redis-multi redis-connection)
  (redis-send-command redis-connection "MULTI")) 

;; OBJECT subcommand [arguments [arguments ...] ]
(define (redis-object redis-connection subcommand . opts)
  (apply redis-send-command redis-connection "OBJECT" subcommand opts)) 

;; PERSIST key
(define (redis-persist redis-connection key)
  (redis-send-command redis-connection "PERSIST" key)) 

;; PEXPIRE key milliseconds
(define (redis-pexpire redis-connection key milliseconds)
  (redis-send-command redis-connection "PEXPIRE" key milliseconds)) 

;; PEXPIREAT key milliseconds-timestamp
(define (redis-pexpireat redis-connection key milliseconds-timestamp)
  (redis-send-command redis-connection "PEXPIREAT" key milliseconds-timestamp)) 

;; PFADD key element [element ...]
(define (redis-pfadd redis-connection key element . opts)
  (apply redis-send-command redis-connection "PFADD" key element opts)) 

;; PFCOUNT key [key ...]
(define (redis-pfcount redis-connection key . opts)
  (apply redis-send-command redis-connection "PFCOUNT" key opts)) 

;; PFMERGE destkey sourcekey [sourcekey ...]
(define (redis-pfmerge redis-connection destkey sourcekey . opts)
  (apply redis-send-command redis-connection "PFMERGE" destkey sourcekey opts)) 

;; PING [message]
(define (redis-ping redis-connection . opts)
  (apply redis-send-command redis-connection "PING" opts)) 

;; PSETEX key milliseconds value
(define (redis-psetex redis-connection key milliseconds value)
  (redis-send-command redis-connection "PSETEX" key milliseconds value)) 

;; PSUBSCRIBE pattern [pattern ...]
(define (redis-psubscribe redis-connection pattern . opts)
  (apply redis-send-command redis-connection "PSUBSCRIBE" pattern opts)) 

;; PUBSUB subcommand [argument [argument ...] ]
(define (redis-pubsub redis-connection subcommand . opts)
  (apply redis-send-command redis-connection "PUBSUB" subcommand opts)) 

;; PTTL key
(define (redis-pttl redis-connection key)
  (redis-send-command redis-connection "PTTL" key)) 

;; PUBLISH channel message
(define (redis-publish redis-connection channel message)
  (redis-send-command redis-connection "PUBLISH" channel message)) 

;; PUNSUBSCRIBE [pattern [pattern ...] ]
(define (redis-punsubscribe redis-connection . opts)
  (apply redis-send-command redis-connection "PUNSUBSCRIBE" opts)) 

;; QUIT
(define (redis-quit redis-connection)
  (redis-send-command redis-connection "QUIT")) 

;; RANDOMKEY
(define (redis-randomkey redis-connection)
  (redis-send-command redis-connection "RANDOMKEY")) 

;; READONLY
(define (redis-readonly redis-connection)
  (redis-send-command redis-connection "READONLY")) 

;; READWRITE
(define (redis-readwrite redis-connection)
  (redis-send-command redis-connection "READWRITE")) 

;; RENAME key newkey
(define (redis-rename redis-connection key newkey)
  (redis-send-command redis-connection "RENAME" key newkey)) 

;; RENAMENX key newkey
(define (redis-renamenx redis-connection key newkey)
  (redis-send-command redis-connection "RENAMENX" key newkey)) 

;; RESTORE key ttl serialized-value [REPLACE]
(define (redis-restore redis-connection key ttl serialized-value . opts)
  (apply redis-send-command redis-connection "RESTORE" key ttl serialized-value opts)) 

;; ROLE
(define (redis-role redis-connection)
  (redis-send-command redis-connection "ROLE")) 

;; RPOP key
(define (redis-rpop redis-connection key)
  (redis-send-command redis-connection "RPOP" key)) 

;; RPOPLPUSH source destination
(define (redis-rpoplpush redis-connection source destination)
  (redis-send-command redis-connection "RPOPLPUSH" source destination)) 

;; RPUSH key value [value ...]
(define (redis-rpush redis-connection key value . opts)
  (apply redis-send-command redis-connection "RPUSH" key value opts)) 

;; RPUSHX key value
(define (redis-rpushx redis-connection key value)
  (redis-send-command redis-connection "RPUSHX" key value)) 

;; SADD key member [member ...]
(define (redis-sadd redis-connection key member . opts)
  (apply redis-send-command redis-connection "SADD" key member opts)) 

;; SAVE
(define (redis-save redis-connection)
  (redis-send-command redis-connection "SAVE")) 

;; SCARD key
(define (redis-scard redis-connection key)
  (redis-send-command redis-connection "SCARD" key)) 

;; SCRIPT DEBUG YES|SYNC|NO
(define (redis-script-debug redis-connection arg7)
  (redis-send-command redis-connection "SCRIPT DEBUG" arg7)) 

;; SCRIPT EXISTS sha1 [sha1 ...]
(define (redis-script-exists redis-connection sha1 . opts)
  (apply redis-send-command redis-connection "SCRIPT EXISTS" sha1 opts)) 

;; SCRIPT FLUSH
(define (redis-script-flush redis-connection)
  (redis-send-command redis-connection "SCRIPT FLUSH")) 

;; SCRIPT KILL
(define (redis-script-kill redis-connection)
  (redis-send-command redis-connection "SCRIPT KILL")) 

;; SCRIPT LOAD script
(define (redis-script-load redis-connection script)
  (redis-send-command redis-connection "SCRIPT LOAD" script)) 

;; SDIFF key [key ...]
(define (redis-sdiff redis-connection key . opts)
  (apply redis-send-command redis-connection "SDIFF" key opts)) 

;; SDIFFSTORE destination key [key ...]
(define (redis-sdiffstore redis-connection destination key . opts)
  (apply redis-send-command redis-connection "SDIFFSTORE" destination key opts)) 

;; SELECT index
(define (redis-select redis-connection index)
  (redis-send-command redis-connection "SELECT" index)) 

;; SET key value [expiration EX seconds|PX milliseconds] [NX|XX]
(define (redis-set redis-connection key value . opts)
  (apply redis-send-command redis-connection "SET" key value opts)) 

;; SETBIT key offset value
(define (redis-setbit redis-connection key offset value)
  (redis-send-command redis-connection "SETBIT" key offset value)) 

;; SETEX key seconds value
(define (redis-setex redis-connection key seconds value)
  (redis-send-command redis-connection "SETEX" key seconds value)) 

;; SETNX key value
(define (redis-setnx redis-connection key value)
  (redis-send-command redis-connection "SETNX" key value)) 

;; SETRANGE key offset value
(define (redis-setrange redis-connection key offset value)
  (redis-send-command redis-connection "SETRANGE" key offset value)) 

;; SHUTDOWN [NOSAVE|SAVE]
(define (redis-shutdown redis-connection . opts)
  (apply redis-send-command redis-connection "SHUTDOWN" opts)) 

;; SINTER key [key ...]
(define (redis-sinter redis-connection key . opts)
  (apply redis-send-command redis-connection "SINTER" key opts)) 

;; SINTERSTORE destination key [key ...]
(define (redis-sinterstore redis-connection destination key . opts)
  (apply redis-send-command redis-connection "SINTERSTORE" destination key opts)) 

;; SISMEMBER key member
(define (redis-sismember redis-connection key member)
  (redis-send-command redis-connection "SISMEMBER" key member)) 

;; SLAVEOF host port
(define (redis-slaveof redis-connection host port)
  (redis-send-command redis-connection "SLAVEOF" host port)) 

;; REPLICAOF host port
(define (redis-replicaof redis-connection host port)
  (redis-send-command redis-connection "REPLICAOF" host port)) 

;; SLOWLOG subcommand [argument]
(define (redis-slowlog redis-connection subcommand . opts)
  (apply redis-send-command redis-connection "SLOWLOG" subcommand opts)) 

;; SMEMBERS key
(define (redis-smembers redis-connection key)
  (redis-send-command redis-connection "SMEMBERS" key)) 

;; SMOVE source destination member
(define (redis-smove redis-connection source destination member)
  (redis-send-command redis-connection "SMOVE" source destination member)) 

;; SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...] ] [ASC|DESC] [ALPHA] [STORE destination]
(define (redis-sort redis-connection key . opts)
  (apply redis-send-command redis-connection "SORT" key opts)) 

;; SPOP key [count]
(define (redis-spop redis-connection key . opts)
  (apply redis-send-command redis-connection "SPOP" key opts)) 

;; SRANDMEMBER key [count]
(define (redis-srandmember redis-connection key . opts)
  (apply redis-send-command redis-connection "SRANDMEMBER" key opts)) 

;; SREM key member [member ...]
(define (redis-srem redis-connection key member . opts)
  (apply redis-send-command redis-connection "SREM" key member opts)) 

;; STRLEN key
(define (redis-strlen redis-connection key)
  (redis-send-command redis-connection "STRLEN" key)) 

;; SUBSCRIBE channel [channel ...]
(define (redis-subscribe redis-connection channel . opts)
  (apply redis-send-command redis-connection "SUBSCRIBE" channel opts)) 

;; SUNION key [key ...]
(define (redis-sunion redis-connection key . opts)
  (apply redis-send-command redis-connection "SUNION" key opts)) 

;; SUNIONSTORE destination key [key ...]
(define (redis-sunionstore redis-connection destination key . opts)
  (apply redis-send-command redis-connection "SUNIONSTORE" destination key opts)) 

;; SWAPDB index index
(define (redis-swapdb redis-connection index index1)
  (redis-send-command redis-connection "SWAPDB" index index1)) 

;; SYNC
(define (redis-sync redis-connection)
  (redis-send-command redis-connection "SYNC")) 

;; TIME
(define (redis-time redis-connection)
  (redis-send-command redis-connection "TIME")) 

;; TOUCH key [key ...]
(define (redis-touch redis-connection key . opts)
  (apply redis-send-command redis-connection "TOUCH" key opts)) 

;; TTL key
(define (redis-ttl redis-connection key)
  (redis-send-command redis-connection "TTL" key)) 

;; TYPE key
(define (redis-type redis-connection key)
  (redis-send-command redis-connection "TYPE" key)) 

;; UNSUBSCRIBE [channel [channel ...] ]
(define (redis-unsubscribe redis-connection . opts)
  (apply redis-send-command redis-connection "UNSUBSCRIBE" opts)) 

;; UNLINK key [key ...]
(define (redis-unlink redis-connection key . opts)
  (apply redis-send-command redis-connection "UNLINK" key opts)) 

;; UNWATCH
(define (redis-unwatch redis-connection)
  (redis-send-command redis-connection "UNWATCH")) 

;; WAIT numreplicas timeout
(define (redis-wait redis-connection numreplicas timeout)
  (redis-send-command redis-connection "WAIT" numreplicas timeout)) 

;; WATCH key [key ...]
(define (redis-watch redis-connection key . opts)
  (apply redis-send-command redis-connection "WATCH" key opts)) 

;; ZADD key [NX|XX] [CH] [INCR] score member [score member ...]
(define (redis-zadd redis-connection key . opts)
  (apply redis-send-command redis-connection "ZADD" key opts)) 

;; ZCARD key
(define (redis-zcard redis-connection key)
  (redis-send-command redis-connection "ZCARD" key)) 

;; ZCOUNT key min max
(define (redis-zcount redis-connection key min max)
  (redis-send-command redis-connection "ZCOUNT" key min max)) 

;; ZINCRBY key increment member
(define (redis-zincrby redis-connection key increment member)
  (redis-send-command redis-connection "ZINCRBY" key increment member)) 

;; ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...] ] [AGGREGATE SUM|MIN|MAX]
(define (redis-zinterstore redis-connection destination numkeys key . opts)
  (apply redis-send-command redis-connection "ZINTERSTORE" destination numkeys key opts)) 

;; ZLEXCOUNT key min max
(define (redis-zlexcount redis-connection key min max)
  (redis-send-command redis-connection "ZLEXCOUNT" key min max)) 

;; ZPOPMAX key [count]
(define (redis-zpopmax redis-connection key . opts)
  (apply redis-send-command redis-connection "ZPOPMAX" key opts)) 

;; ZPOPMIN key [count]
(define (redis-zpopmin redis-connection key . opts)
  (apply redis-send-command redis-connection "ZPOPMIN" key opts)) 

;; ZRANGE key start stop [WITHSCORES]
(define (redis-zrange redis-connection key start stop . opts)
  (apply redis-send-command redis-connection "ZRANGE" key start stop opts)) 

;; ZRANGEBYLEX key min max [LIMIT offset count]
(define (redis-zrangebylex redis-connection key min max . opts)
  (apply redis-send-command redis-connection "ZRANGEBYLEX" key min max opts)) 

;; ZREVRANGEBYLEX key max min [LIMIT offset count]
(define (redis-zrevrangebylex redis-connection key max min . opts)
  (apply redis-send-command redis-connection "ZREVRANGEBYLEX" key max min opts)) 

;; ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]
(define (redis-zrangebyscore redis-connection key min max . opts)
  (apply redis-send-command redis-connection "ZRANGEBYSCORE" key min max opts)) 

;; ZRANK key member
(define (redis-zrank redis-connection key member)
  (redis-send-command redis-connection "ZRANK" key member)) 

;; ZREM key member [member ...]
(define (redis-zrem redis-connection key member . opts)
  (apply redis-send-command redis-connection "ZREM" key member opts)) 

;; ZREMRANGEBYLEX key min max
(define (redis-zremrangebylex redis-connection key min max)
  (redis-send-command redis-connection "ZREMRANGEBYLEX" key min max)) 

;; ZREMRANGEBYRANK key start stop
(define (redis-zremrangebyrank redis-connection key start stop)
  (redis-send-command redis-connection "ZREMRANGEBYRANK" key start stop)) 

;; ZREMRANGEBYSCORE key min max
(define (redis-zremrangebyscore redis-connection key min max)
  (redis-send-command redis-connection "ZREMRANGEBYSCORE" key min max)) 

;; ZREVRANGE key start stop [WITHSCORES]
(define (redis-zrevrange redis-connection key start stop . opts)
  (apply redis-send-command redis-connection "ZREVRANGE" key start stop opts)) 

;; ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]
(define (redis-zrevrangebyscore redis-connection key max min . opts)
  (apply redis-send-command redis-connection "ZREVRANGEBYSCORE" key max min opts)) 

;; ZREVRANK key member
(define (redis-zrevrank redis-connection key member)
  (redis-send-command redis-connection "ZREVRANK" key member)) 

;; ZSCORE key member
(define (redis-zscore redis-connection key member)
  (redis-send-command redis-connection "ZSCORE" key member)) 

;; ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...] ] [AGGREGATE SUM|MIN|MAX]
(define (redis-zunionstore redis-connection destination numkeys key . opts)
  (apply redis-send-command redis-connection "ZUNIONSTORE" destination numkeys key opts)) 

;; SCAN cursor [MATCH pattern] [COUNT count]
(define (redis-scan redis-connection cursor . opts)
  (apply redis-send-command redis-connection "SCAN" cursor opts)) 

;; SSCAN key cursor [MATCH pattern] [COUNT count]
(define (redis-sscan redis-connection key cursor . opts)
  (apply redis-send-command redis-connection "SSCAN" key cursor opts)) 

;; HSCAN key cursor [MATCH pattern] [COUNT count]
(define (redis-hscan redis-connection key cursor . opts)
  (apply redis-send-command redis-connection "HSCAN" key cursor opts)) 

;; ZSCAN key cursor [MATCH pattern] [COUNT count]
(define (redis-zscan redis-connection key cursor . opts)
  (apply redis-send-command redis-connection "ZSCAN" key cursor opts)) 

;; XINFO [CONSUMERS key groupname] [GROUPS key] [STREAM key] [HELP]
(define (redis-xinfo redis-connection . opts)
  (apply redis-send-command redis-connection "XINFO" opts)) 

;; XADD key ID field string [field string ...]
(define (redis-xadd redis-connection key ID field string . opts)
  (apply redis-send-command redis-connection "XADD" key ID field string opts)) 

;; XTRIM key MAXLEN [~] count
(define (redis-xtrim redis-connection key MAXLEN . opts)
  (apply redis-send-command redis-connection "XTRIM" key MAXLEN opts)) 

;; XDEL key ID [ID ...]
(define (redis-xdel redis-connection key ID . opts)
  (apply redis-send-command redis-connection "XDEL" key ID opts)) 

;; XRANGE key start end [COUNT count]
(define (redis-xrange redis-connection key start end . opts)
  (apply redis-send-command redis-connection "XRANGE" key start end opts)) 

;; XREVRANGE key end start [COUNT count]
(define (redis-xrevrange redis-connection key end start . opts)
  (apply redis-send-command redis-connection "XREVRANGE" key end start opts)) 

;; XLEN key
(define (redis-xlen redis-connection key)
  (redis-send-command redis-connection "XLEN" key)) 

;; XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]
(define (redis-xread redis-connection . opts)
  (apply redis-send-command redis-connection "XREAD" opts)) 

;; XGROUP [CREATE key groupname id-or-$] [SETID key groupname id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername]
(define (redis-xgroup redis-connection . opts)
  (apply redis-send-command redis-connection "XGROUP" opts)) 

;; XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]
(define (redis-xreadgroup redis-connection GROUP group consumer . opts)
  (apply redis-send-command redis-connection "XREADGROUP" GROUP group consumer opts)) 

;; XACK key group ID [ID ...]
(define (redis-xack redis-connection key group ID . opts)
  (apply redis-send-command redis-connection "XACK" key group ID opts)) 

;; XCLAIM key group consumer min-idle-time ID [ID ...] [IDLE ms] [TIME ms-unix-time] [RETRYCOUNT count] [FORCE] [JUSTID]
(define (redis-xclaim redis-connection key group consumer min-idle-time ID . opts)
  (apply redis-send-command redis-connection "XCLAIM" key group consumer min-idle-time ID opts)) 

;; XPENDING key group [start end count] [consumer]
(define (redis-xpending redis-connection key group . opts)
  (apply redis-send-command redis-connection "XPENDING" key group opts)) 

)
